# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  password: PasswordState
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  password: PasswordFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input PasswordFilter {
  isSet: Boolean!
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  password: String
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  password: String
}

type Seed {
  id: ID!
  name: String
  species: String
  plantType: String
  companyName: String
  link: String
  packedForSeason: String
  daysToEmerge: String
  plantingDepth: String
  seedSpacing: String
  rowSpacing: String
  daysToMaturity: String
  weeksAfterLastFrostToStartIndoors: String
  weeksBeforeFirstFrostToStartIndoors: String
  weeksAfterLastFrostToSowOutdoors: String
  weeksBeforeFirstFrostToSowOutdoors: String
  startIndoors: Boolean
  directSow: Boolean
  isHeirloom: Boolean
  isOpenPollenated: Boolean
}

input SeedWhereUniqueInput {
  id: ID
}

input SeedWhereInput {
  AND: [SeedWhereInput!]
  OR: [SeedWhereInput!]
  NOT: [SeedWhereInput!]
  id: IDFilter
  name: StringFilter
  species: StringFilter
  plantType: StringFilter
  companyName: StringFilter
  link: StringFilter
  packedForSeason: StringFilter
  daysToEmerge: StringFilter
  plantingDepth: StringFilter
  seedSpacing: StringFilter
  rowSpacing: StringFilter
  daysToMaturity: StringFilter
  weeksAfterLastFrostToStartIndoors: StringFilter
  weeksBeforeFirstFrostToStartIndoors: StringFilter
  weeksAfterLastFrostToSowOutdoors: StringFilter
  weeksBeforeFirstFrostToSowOutdoors: StringFilter
  startIndoors: BooleanFilter
  directSow: BooleanFilter
  isHeirloom: BooleanFilter
  isOpenPollenated: BooleanFilter
}

input BooleanFilter {
  equals: Boolean
  not: BooleanFilter
}

input SeedOrderByInput {
  id: OrderDirection
  name: OrderDirection
  species: OrderDirection
  plantType: OrderDirection
  companyName: OrderDirection
  link: OrderDirection
  packedForSeason: OrderDirection
  daysToEmerge: OrderDirection
  plantingDepth: OrderDirection
  seedSpacing: OrderDirection
  rowSpacing: OrderDirection
  daysToMaturity: OrderDirection
  weeksAfterLastFrostToStartIndoors: OrderDirection
  weeksBeforeFirstFrostToStartIndoors: OrderDirection
  weeksAfterLastFrostToSowOutdoors: OrderDirection
  weeksBeforeFirstFrostToSowOutdoors: OrderDirection
  startIndoors: OrderDirection
  directSow: OrderDirection
  isHeirloom: OrderDirection
  isOpenPollenated: OrderDirection
}

input SeedUpdateInput {
  name: String
  species: String
  plantType: String
  companyName: String
  link: String
  packedForSeason: String
  daysToEmerge: String
  plantingDepth: String
  seedSpacing: String
  rowSpacing: String
  daysToMaturity: String
  weeksAfterLastFrostToStartIndoors: String
  weeksBeforeFirstFrostToStartIndoors: String
  weeksAfterLastFrostToSowOutdoors: String
  weeksBeforeFirstFrostToSowOutdoors: String
  startIndoors: Boolean
  directSow: Boolean
  isHeirloom: Boolean
  isOpenPollenated: Boolean
}

input SeedUpdateArgs {
  where: SeedWhereUniqueInput!
  data: SeedUpdateInput!
}

input SeedCreateInput {
  name: String
  species: String
  plantType: String
  companyName: String
  link: String
  packedForSeason: String
  daysToEmerge: String
  plantingDepth: String
  seedSpacing: String
  rowSpacing: String
  daysToMaturity: String
  weeksAfterLastFrostToStartIndoors: String
  weeksBeforeFirstFrostToStartIndoors: String
  weeksAfterLastFrostToSowOutdoors: String
  weeksBeforeFirstFrostToSowOutdoors: String
  startIndoors: Boolean
  directSow: Boolean
  isHeirloom: Boolean
  isOpenPollenated: Boolean
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createSeed(data: SeedCreateInput!): Seed
  createSeeds(data: [SeedCreateInput!]!): [Seed]
  updateSeed(where: SeedWhereUniqueInput!, data: SeedUpdateInput!): Seed
  updateSeeds(data: [SeedUpdateArgs!]!): [Seed]
  deleteSeed(where: SeedWhereUniqueInput!): Seed
  deleteSeeds(where: [SeedWhereUniqueInput!]!): [Seed]
  endSession: Boolean!
  authenticateUserWithPassword(email: String!, password: String!): UserAuthenticationWithPasswordResult
  createInitialUser(data: CreateInitialUserInput!): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult = UserAuthenticationWithPasswordSuccess | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  name: String
  email: String
  password: String
}

type Query {
  users(where: UserWhereInput! = {}, orderBy: [UserOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: UserWhereUniqueInput): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  seeds(where: SeedWhereInput! = {}, orderBy: [SeedOrderByInput!]! = [], take: Int, skip: Int! = 0, cursor: SeedWhereUniqueInput): [Seed!]
  seed(where: SeedWhereUniqueInput!): Seed
  seedsCount(where: SeedWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  groups: [KeystoneAdminUIFieldGroupMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
  isSingleton: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  description: String
  isOrderable: Boolean!
  isFilterable: Boolean!
  isNonNull: [KeystoneAdminUIFieldMetaIsNonNull!]
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

enum KeystoneAdminUIFieldMetaIsNonNull {
  read
  create
  update
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
  fieldPosition: KeystoneAdminUIFieldMetaItemViewFieldPosition
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

enum KeystoneAdminUIFieldMetaItemViewFieldPosition {
  form
  sidebar
}

enum QueryMode {
  default
  insensitive
}

type KeystoneAdminUIFieldGroupMeta {
  label: String!
  description: String
  fields: [KeystoneAdminUIFieldMeta!]!
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
